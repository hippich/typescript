==== tests/cases/compiler/parserSyntaxWalker.generated.ts (22 errors) ====
    declare module "fs" {
        export class File {
            constructor(filename: string);
            public ReadAllText(): string;
        }
        export interface IFile {
            [index: number]: string;
        }
    }
    
    import fs = module("fs");
                      ~
!!! parserSyntaxWalker.generated.ts(11,19): error TS1005: ';' expected.
    ~~~~~~~~~~~~~~~~~~
!!! parserSyntaxWalker.generated.ts(11,1): error TS2072: Module cannot be aliased to a non-module type.
                ~~~~~~
!!! parserSyntaxWalker.generated.ts(11,13): error TS2179: Unable to resolve module reference 'module'.
    
    
    module TypeScriptAllInOne {
        export class Program {
            static Main(...args: string[]) {
                try {
                    var bfs = new BasicFeatures();
                    var retValue: number = 0;
    
                    retValue = bfs.VARIABLES();
                    if (retValue != 0) {
    
                        return 1;
                    }
    
                    retValue = bfs.STATEMENTS(4);
                    if (retValue != 0) {
    
                        return 1;
                    }
    
    
                    retValue = bfs.TYPES();
                    if (retValue != 0) {
    
                        return 1;
                    }
    
                    retValue = bfs.OPERATOR();
                    if (retValue != 0) {
    
                        return 1;
                    }
                }
                catch (e) {
                    console.log(e);
                    ~~~~~~~
!!! parserSyntaxWalker.generated.ts(47,17): error TS2095: Cannot find name 'console'.
                }
                finally {
    
                }
    
                console.log('Done');
                ~~~~~~~
!!! parserSyntaxWalker.generated.ts(53,13): error TS2095: Cannot find name 'console'.
    
                return 0;
    
            }
        }
    
        class BasicFeatures {
            /// <summary>
            /// Test various of variables. Including nullable,key world as variable,special format
            /// </summary>
            /// <returns></returns>
            public VARIABLES(): number {
                var local = Number.MAX_VALUE;
                var min = Number.MIN_VALUE;
                var inf = Number.NEGATIVE_INFINITY;
                var nan = Number.NaN;
                var undef = undefined;
    
                var п = local;
                var м = local;
    
                var local5 = <fs.File>null;
                var local6 = local5 instanceof fs.File;
                                               ~~
!!! parserSyntaxWalker.generated.ts(76,44): error TS2095: Cannot find name 'fs'.
    
                var hex = 0xBADC0DE, Hex = 0XDEADBEEF;
                var float = 6.02e23, float2 = 6.02E-23
                var char = 'c', \u0066 = '\u0066', hexchar = '\x42';
                var quoted = '"', quoted2 = "'";
                var reg = /\w*/;
                var objLit = { "var": number = 42, equals: function (x) { return x["var"] === 42; }, toString: () => 'objLit{42}' };
                var weekday = Weekdays.Monday;
    
                var con = char + f + hexchar + float.toString() + float2.toString() + reg.toString() + objLit + weekday;
    
                //
                var any = 0;
                var boolean = 0;
                var declare = 0;
                var constructor = 0;
                var get = 0;
                var implements = 0;
                var interface = 0;
                var let = 0;
                var module = 0;
                var number = 0;
                var package = 0;
                var private = 0;
                var protected = 0;
                var public = 0;
                var set = 0;
                var static = 0;
                var string = 0;
                var yield = 0;
    
                var sum3 = any + boolean + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set + static + string + yield;
    
                return 0;
            }
    
            /// <summary>
            /// Test different statements. Including if-else,swith,foreach,(un)checked,lock,using,try-catch-finally
            /// </summary>
            /// <param name="i"></param>
            /// <returns></returns>
            STATEMENTS(i: number): number {
                var retVal = 0;
                if (i == 1)
                    retVal = 1;
                else
                    retVal = 0;
                switch (i) {
                    case 2:
                        retVal = 1;
                        break;
                    case 3:
                        retVal = 1;
                        break;
                    default:
                        break;
                }
    
                for (var x in { x: 0, y: 1 }) {
                }
    
                try {
                    throw null;
                }
                catch (Exception) {
                }
                finally {
                    try { }
                    catch (Exception) { }
                }
    
                return retVal;
            }
    
            /// <summary>
            /// Test types in ts language. Including class,struct,interface,delegate,anonymous type
            /// </summary>
            /// <returns></returns>
            public TYPES(): number {
                var retVal = 0;
                var c = new CLASS();
                var xx: IF = c;
                retVal += c.Property;
                retVal += c.Member();
                retVal += xx ^= Foo() ? 0 : 1;
                          ~~
!!! parserSyntaxWalker.generated.ts(161,23): error TS2113: The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.
                                ~~~
!!! parserSyntaxWalker.generated.ts(161,29): error TS2095: Cannot find name 'Foo'.
    
                //anonymous type
                var anony = { a: new CLASS() };
    
                retVal += anony.a.d();
                ~~~~~~
!!! parserSyntaxWalker.generated.ts(166,13): error TS2011: Type 'string' is not assignable to type 'number'.
    
                return retVal;
            }
    
    
            ///// <summary>
            ///// Test different operators
            ///// </summary>
            ///// <returns></returns>
            public OPERATOR(): number {
                var a: number[] = [1, 2, 3, 4,  implements , ];/*[] bug*/ // YES []
                                                ~~~~~~~~~~
!!! parserSyntaxWalker.generated.ts(177,45): error TS2095: Cannot find name 'implements'.
                var i = a[1];/*[]*/
                i = i + i - i * i / i % i & i | i ^ i;/*+ - * / % & | ^*/
                var b = true && false || true ^ false;/*& | ^*/
                                         ~~~~
!!! parserSyntaxWalker.generated.ts(180,38): error TS2113: The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.
                                                ~~~~~
!!! parserSyntaxWalker.generated.ts(180,45): error TS2112: The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.
                b = !b;/*!*/
                i = ~i;/*~i*/
                b = i < (i -  continue ) && (i + 1) > i;/*< && >*/
                              ~~~~~~~~
!!! parserSyntaxWalker.generated.ts(183,27): error TS1109: Expression expected.
                                       ~
!!! parserSyntaxWalker.generated.ts(183,36): error TS1005: ';' expected.
                                         ~~
!!! parserSyntaxWalker.generated.ts(183,38): error TS1008: Unexpected token; 'statement' expected.
                var f = true ? 1 : 0;/*? :*/   // YES :
                i++;/*++*/
                i--;/*--*/
                b = true && false || true;/*&& ||*/
                i = i << 5;/*<<*/
                i = i >> 5;/*>>*/
                var j = i;
                b = i == j && i != j && i <= j && i >= j;/*= == && != <= >=*/
                i += <number>5.0;/*+=*/
                i -= i;/*-=*/
                i *= i;/**=*/
                if (i == 0)
                    i++;
                i /= i;/*/=*/
                i %= i;/*%=*/
                i &= i;/*&=*/
                i |= i;/*|=*/
                i ^= i;/*^=*/
                i <<= i;/*<<=*/
                i >>= i;/*>>=*/
    
                if (i == 0 && !b && f == 1)
                    return 0;
                else return 1;
            }
    
        }
    
        interface IF {
            Foo <!-- ): boolean;
                 ~
!!! parserSyntaxWalker.generated.ts(213,14): error TS1008: Unexpected token; 'type parameter' expected.
                     ~
!!! parserSyntaxWalker.generated.ts(213,18): error TS1109: Expression expected.
                      ~
!!! parserSyntaxWalker.generated.ts(213,19): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
                        ~~~~~~~
!!! parserSyntaxWalker.generated.ts(213,21): error TS2095: Cannot find name 'boolean'.
        }
    
        class CLASS implements IF {
                               ~~
!!! parserSyntaxWalker.generated.ts(216,28): error TS2095: Cannot find name 'IF'.
    
            public d = () =>  '  return 0; };
                                             
            public get Property() { return 0; }
    
!!! parserSyntaxWalker.generated.ts(218,42): error TS1002: Missing close quote character.
            public Member() {
                return 0;
            }
            public Foo(): boolean {
                var myEvent = () => { return 1; };
                if (myEvent() == 1)
                    return true;
                else
                    return false;
            }
        }
    
    
        // todo: use these
        class A {
            public method1(val:number) {
                return val;
            }
            public method2() {
                return 2 * this.method1(2);
            }
        }
    
        class B extends A {
    
            public method2() {
                return this.method1(2);
            }
        }
    
        class Overloading {
    
            private otherValue = 42;
    
            constructor(private value: number, public name: string) { }
           
            public Overloads(value: string);
            public Overloads(value: string, ...rest: string[]) { }
    
            public DefaultValue(value?: string = "Hello") { }
        }
    }
    ~
!!! parserSyntaxWalker.generated.ts(261,1): error TS1008: Unexpected token; 'module, class, interface, enum, import or statement' expected.
    
    enum Weekdays {
        Monday,
        Tuesday,
        Weekend,
    }
    
    enum Fruit {
        Apple,
        Pear
    }
    
    interface IDisposable {
        Dispose(): void;
    }
    
    TypeScriptAllInOne.Program.Main();
    